// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* CameraPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraPose_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pose_2eproto() {
  protobuf_AddDesc_pose_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pose.proto");
  GOOGLE_CHECK(file != NULL);
  CameraPose_descriptor_ = file->message_type(0);
  static const int CameraPose_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr1c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr1c2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr1c3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr2c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr2c2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr2c3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr3c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr3c2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, rotmatr3c3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, navxtime_),
  };
  CameraPose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraPose_descriptor_,
      CameraPose::default_instance_,
      CameraPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraPose));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pose_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraPose_descriptor_, &CameraPose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pose_2eproto() {
  delete CameraPose::default_instance_;
  delete CameraPose_reflection_;
}

void protobuf_AddDesc_pose_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npose.proto\022\005proto\"\363\001\n\nCameraPose\022\t\n\001x\030"
    "\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\022\n\nrotMatR1C"
    "1\030\004 \002(\001\022\022\n\nrotMatR1C2\030\005 \002(\001\022\022\n\nrotMatR1C"
    "3\030\006 \002(\001\022\022\n\nrotMatR2C1\030\007 \002(\001\022\022\n\nrotMatR2C"
    "2\030\010 \002(\001\022\022\n\nrotMatR2C3\030\t \002(\001\022\022\n\nrotMatR3C"
    "1\030\n \002(\001\022\022\n\nrotMatR3C2\030\013 \002(\001\022\022\n\nrotMatR3C"
    "3\030\014 \002(\001\022\020\n\010navXTime\030\r \001(\005", 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pose.proto", &protobuf_RegisterTypes);
  CameraPose::default_instance_ = new CameraPose();
  CameraPose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pose_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pose_2eproto {
  StaticDescriptorInitializer_pose_2eproto() {
    protobuf_AddDesc_pose_2eproto();
  }
} static_descriptor_initializer_pose_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CameraPose::kXFieldNumber;
const int CameraPose::kYFieldNumber;
const int CameraPose::kZFieldNumber;
const int CameraPose::kRotMatR1C1FieldNumber;
const int CameraPose::kRotMatR1C2FieldNumber;
const int CameraPose::kRotMatR1C3FieldNumber;
const int CameraPose::kRotMatR2C1FieldNumber;
const int CameraPose::kRotMatR2C2FieldNumber;
const int CameraPose::kRotMatR2C3FieldNumber;
const int CameraPose::kRotMatR3C1FieldNumber;
const int CameraPose::kRotMatR3C2FieldNumber;
const int CameraPose::kRotMatR3C3FieldNumber;
const int CameraPose::kNavXTimeFieldNumber;
#endif  // !_MSC_VER

CameraPose::CameraPose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CameraPose)
}

void CameraPose::InitAsDefaultInstance() {
}

CameraPose::CameraPose(const CameraPose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.CameraPose)
}

void CameraPose::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  rotmatr1c1_ = 0;
  rotmatr1c2_ = 0;
  rotmatr1c3_ = 0;
  rotmatr2c1_ = 0;
  rotmatr2c2_ = 0;
  rotmatr2c3_ = 0;
  rotmatr3c1_ = 0;
  rotmatr3c2_ = 0;
  rotmatr3c3_ = 0;
  navxtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraPose::~CameraPose() {
  // @@protoc_insertion_point(destructor:proto.CameraPose)
  SharedDtor();
}

void CameraPose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraPose_descriptor_;
}

const CameraPose& CameraPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pose_2eproto();
  return *default_instance_;
}

CameraPose* CameraPose::default_instance_ = NULL;

CameraPose* CameraPose::New() const {
  return new CameraPose;
}

void CameraPose::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraPose*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, rotmatr2c2_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(rotmatr2c3_, navxtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CameraPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rotMatR1C1;
        break;
      }

      // required double rotMatR1C1 = 4;
      case 4: {
        if (tag == 33) {
         parse_rotMatR1C1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr1c1_)));
          set_has_rotmatr1c1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_rotMatR1C2;
        break;
      }

      // required double rotMatR1C2 = 5;
      case 5: {
        if (tag == 41) {
         parse_rotMatR1C2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr1c2_)));
          set_has_rotmatr1c2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_rotMatR1C3;
        break;
      }

      // required double rotMatR1C3 = 6;
      case 6: {
        if (tag == 49) {
         parse_rotMatR1C3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr1c3_)));
          set_has_rotmatr1c3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rotMatR2C1;
        break;
      }

      // required double rotMatR2C1 = 7;
      case 7: {
        if (tag == 57) {
         parse_rotMatR2C1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr2c1_)));
          set_has_rotmatr2c1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_rotMatR2C2;
        break;
      }

      // required double rotMatR2C2 = 8;
      case 8: {
        if (tag == 65) {
         parse_rotMatR2C2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr2c2_)));
          set_has_rotmatr2c2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_rotMatR2C3;
        break;
      }

      // required double rotMatR2C3 = 9;
      case 9: {
        if (tag == 73) {
         parse_rotMatR2C3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr2c3_)));
          set_has_rotmatr2c3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_rotMatR3C1;
        break;
      }

      // required double rotMatR3C1 = 10;
      case 10: {
        if (tag == 81) {
         parse_rotMatR3C1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr3c1_)));
          set_has_rotmatr3c1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_rotMatR3C2;
        break;
      }

      // required double rotMatR3C2 = 11;
      case 11: {
        if (tag == 89) {
         parse_rotMatR3C2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr3c2_)));
          set_has_rotmatr3c2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_rotMatR3C3;
        break;
      }

      // required double rotMatR3C3 = 12;
      case 12: {
        if (tag == 97) {
         parse_rotMatR3C3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotmatr3c3_)));
          set_has_rotmatr3c3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_navXTime;
        break;
      }

      // optional int32 navXTime = 13;
      case 13: {
        if (tag == 104) {
         parse_navXTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &navxtime_)));
          set_has_navxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CameraPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CameraPose)
  return false;
#undef DO_
}

void CameraPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CameraPose)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double rotMatR1C1 = 4;
  if (has_rotmatr1c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rotmatr1c1(), output);
  }

  // required double rotMatR1C2 = 5;
  if (has_rotmatr1c2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rotmatr1c2(), output);
  }

  // required double rotMatR1C3 = 6;
  if (has_rotmatr1c3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rotmatr1c3(), output);
  }

  // required double rotMatR2C1 = 7;
  if (has_rotmatr2c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rotmatr2c1(), output);
  }

  // required double rotMatR2C2 = 8;
  if (has_rotmatr2c2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rotmatr2c2(), output);
  }

  // required double rotMatR2C3 = 9;
  if (has_rotmatr2c3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rotmatr2c3(), output);
  }

  // required double rotMatR3C1 = 10;
  if (has_rotmatr3c1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->rotmatr3c1(), output);
  }

  // required double rotMatR3C2 = 11;
  if (has_rotmatr3c2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->rotmatr3c2(), output);
  }

  // required double rotMatR3C3 = 12;
  if (has_rotmatr3c3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->rotmatr3c3(), output);
  }

  // optional int32 navXTime = 13;
  if (has_navxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->navxtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CameraPose)
}

::google::protobuf::uint8* CameraPose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CameraPose)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double rotMatR1C1 = 4;
  if (has_rotmatr1c1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rotmatr1c1(), target);
  }

  // required double rotMatR1C2 = 5;
  if (has_rotmatr1c2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rotmatr1c2(), target);
  }

  // required double rotMatR1C3 = 6;
  if (has_rotmatr1c3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rotmatr1c3(), target);
  }

  // required double rotMatR2C1 = 7;
  if (has_rotmatr2c1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rotmatr2c1(), target);
  }

  // required double rotMatR2C2 = 8;
  if (has_rotmatr2c2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rotmatr2c2(), target);
  }

  // required double rotMatR2C3 = 9;
  if (has_rotmatr2c3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rotmatr2c3(), target);
  }

  // required double rotMatR3C1 = 10;
  if (has_rotmatr3c1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->rotmatr3c1(), target);
  }

  // required double rotMatR3C2 = 11;
  if (has_rotmatr3c2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->rotmatr3c2(), target);
  }

  // required double rotMatR3C3 = 12;
  if (has_rotmatr3c3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->rotmatr3c3(), target);
  }

  // optional int32 navXTime = 13;
  if (has_navxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->navxtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CameraPose)
  return target;
}

int CameraPose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required double rotMatR1C1 = 4;
    if (has_rotmatr1c1()) {
      total_size += 1 + 8;
    }

    // required double rotMatR1C2 = 5;
    if (has_rotmatr1c2()) {
      total_size += 1 + 8;
    }

    // required double rotMatR1C3 = 6;
    if (has_rotmatr1c3()) {
      total_size += 1 + 8;
    }

    // required double rotMatR2C1 = 7;
    if (has_rotmatr2c1()) {
      total_size += 1 + 8;
    }

    // required double rotMatR2C2 = 8;
    if (has_rotmatr2c2()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double rotMatR2C3 = 9;
    if (has_rotmatr2c3()) {
      total_size += 1 + 8;
    }

    // required double rotMatR3C1 = 10;
    if (has_rotmatr3c1()) {
      total_size += 1 + 8;
    }

    // required double rotMatR3C2 = 11;
    if (has_rotmatr3c2()) {
      total_size += 1 + 8;
    }

    // required double rotMatR3C3 = 12;
    if (has_rotmatr3c3()) {
      total_size += 1 + 8;
    }

    // optional int32 navXTime = 13;
    if (has_navxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->navxtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraPose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraPose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraPose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraPose::MergeFrom(const CameraPose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_rotmatr1c1()) {
      set_rotmatr1c1(from.rotmatr1c1());
    }
    if (from.has_rotmatr1c2()) {
      set_rotmatr1c2(from.rotmatr1c2());
    }
    if (from.has_rotmatr1c3()) {
      set_rotmatr1c3(from.rotmatr1c3());
    }
    if (from.has_rotmatr2c1()) {
      set_rotmatr2c1(from.rotmatr2c1());
    }
    if (from.has_rotmatr2c2()) {
      set_rotmatr2c2(from.rotmatr2c2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rotmatr2c3()) {
      set_rotmatr2c3(from.rotmatr2c3());
    }
    if (from.has_rotmatr3c1()) {
      set_rotmatr3c1(from.rotmatr3c1());
    }
    if (from.has_rotmatr3c2()) {
      set_rotmatr3c2(from.rotmatr3c2());
    }
    if (from.has_rotmatr3c3()) {
      set_rotmatr3c3(from.rotmatr3c3());
    }
    if (from.has_navxtime()) {
      set_navxtime(from.navxtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraPose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPose::CopyFrom(const CameraPose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void CameraPose::Swap(CameraPose* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(rotmatr1c1_, other->rotmatr1c1_);
    std::swap(rotmatr1c2_, other->rotmatr1c2_);
    std::swap(rotmatr1c3_, other->rotmatr1c3_);
    std::swap(rotmatr2c1_, other->rotmatr2c1_);
    std::swap(rotmatr2c2_, other->rotmatr2c2_);
    std::swap(rotmatr2c3_, other->rotmatr2c3_);
    std::swap(rotmatr3c1_, other->rotmatr3c1_);
    std::swap(rotmatr3c2_, other->rotmatr3c2_);
    std::swap(rotmatr3c3_, other->rotmatr3c3_);
    std::swap(navxtime_, other->navxtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraPose_descriptor_;
  metadata.reflection = CameraPose_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
