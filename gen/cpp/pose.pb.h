// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose.proto

#ifndef PROTOBUF_pose_2eproto__INCLUDED
#define PROTOBUF_pose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pose_2eproto();
void protobuf_AssignDesc_pose_2eproto();
void protobuf_ShutdownFile_pose_2eproto();

class CameraPose;

// ===================================================================

class CameraPose : public ::google::protobuf::Message {
 public:
  CameraPose();
  virtual ~CameraPose();

  CameraPose(const CameraPose& from);

  inline CameraPose& operator=(const CameraPose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraPose& default_instance();

  void Swap(CameraPose* other);

  // implements Message ----------------------------------------------

  CameraPose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraPose& from);
  void MergeFrom(const CameraPose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // optional double yaw = 4;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 4;
  inline double yaw() const;
  inline void set_yaw(double value);

  // optional double pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);

  // optional double roll = 6;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 6;
  inline double roll() const;
  inline void set_roll(double value);

  // optional int32 navXTime = 7;
  inline bool has_navxtime() const;
  inline void clear_navxtime();
  static const int kNavXTimeFieldNumber = 7;
  inline ::google::protobuf::int32 navxtime() const;
  inline void set_navxtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.CameraPose)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_navxtime();
  inline void clear_has_navxtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double yaw_;
  double pitch_;
  double roll_;
  ::google::protobuf::int32 navxtime_;
  friend void  protobuf_AddDesc_pose_2eproto();
  friend void protobuf_AssignDesc_pose_2eproto();
  friend void protobuf_ShutdownFile_pose_2eproto();

  void InitAsDefaultInstance();
  static CameraPose* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraPose

// optional double x = 1;
inline bool CameraPose::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraPose::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraPose::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraPose::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double CameraPose::x() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.x)
  return x_;
}
inline void CameraPose::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.x)
}

// optional double y = 2;
inline bool CameraPose::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraPose::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraPose::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraPose::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double CameraPose::y() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.y)
  return y_;
}
inline void CameraPose::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.y)
}

// optional double z = 3;
inline bool CameraPose::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraPose::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraPose::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraPose::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double CameraPose::z() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.z)
  return z_;
}
inline void CameraPose::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.z)
}

// optional double yaw = 4;
inline bool CameraPose::has_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraPose::set_has_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraPose::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraPose::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double CameraPose::yaw() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.yaw)
  return yaw_;
}
inline void CameraPose::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.yaw)
}

// optional double pitch = 5;
inline bool CameraPose::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraPose::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraPose::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraPose::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double CameraPose::pitch() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.pitch)
  return pitch_;
}
inline void CameraPose::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.pitch)
}

// optional double roll = 6;
inline bool CameraPose::has_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraPose::set_has_roll() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraPose::clear_has_roll() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraPose::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double CameraPose::roll() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.roll)
  return roll_;
}
inline void CameraPose::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.roll)
}

// optional int32 navXTime = 7;
inline bool CameraPose::has_navxtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraPose::set_has_navxtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraPose::clear_has_navxtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraPose::clear_navxtime() {
  navxtime_ = 0;
  clear_has_navxtime();
}
inline ::google::protobuf::int32 CameraPose::navxtime() const {
  // @@protoc_insertion_point(field_get:proto.CameraPose.navXTime)
  return navxtime_;
}
inline void CameraPose::set_navxtime(::google::protobuf::int32 value) {
  set_has_navxtime();
  navxtime_ = value;
  // @@protoc_insertion_point(field_set:proto.CameraPose.navXTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pose_2eproto__INCLUDED
